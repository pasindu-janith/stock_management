/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stock_management;

import com.stock.common.DateAndTime;
import com.stock.common.SystemConfigData;
import com.stock.db.DB;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author pasindu hathurushigh
 */
public class Grn extends javax.swing.JFrame {

    /**
     * Creates new form Grn
     */
    public Grn() {
        initComponents();
        generateGrnID();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txt_grnid = new javax.swing.JTextField();
        txt_supplierid = new javax.swing.JTextField();
        txt_suppliername = new javax.swing.JTextField();
        txt_pono = new javax.swing.JTextField();
        txt_itemid = new javax.swing.JTextField();
        txt_itemname = new javax.swing.JTextField();
        txt_invoiceid = new javax.swing.JTextField();
        txt_podate = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txt_total = new javax.swing.JTextField();
        txt_othercharges = new javax.swing.JTextField();
        txt_discount = new javax.swing.JTextField();
        txt_nettotal = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txt_qty = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txt_unitprice = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        choose_mandate = new com.toedter.calendar.JDateChooser();
        choose_expdate = new com.toedter.calendar.JDateChooser();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        txt_company = new javax.swing.JTextField();
        txt_branch = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Goods Received Note");

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel1.setText("ID");

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel2.setText("Grn ID");

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel3.setText("Name");

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel4.setText("PO No");

        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel6.setText("Item Name");

        jLabel8.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel8.setText("Invoice ID");

        jLabel9.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel9.setText("PO Date");

        jTable1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Manufacture Date", "Expire Date", "Unit Price", "Quantity", "Sub Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(20);
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(300);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
            jTable1.getColumnModel().getColumn(6).setResizable(false);
        }

        txt_grnid.setEditable(false);
        txt_grnid.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        txt_supplierid.setEditable(false);
        txt_supplierid.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        txt_supplierid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_supplieridActionPerformed(evt);
            }
        });

        txt_suppliername.setEditable(false);
        txt_suppliername.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        txt_pono.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        txt_pono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_ponoActionPerformed(evt);
            }
        });

        txt_itemid.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        txt_itemid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_itemidActionPerformed(evt);
            }
        });
        txt_itemid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_itemidKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_itemidKeyTyped(evt);
            }
        });

        txt_itemname.setEditable(false);
        txt_itemname.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        txt_invoiceid.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        txt_invoiceid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_invoiceidActionPerformed(evt);
            }
        });

        txt_podate.setEditable(false);
        txt_podate.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        jLabel10.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel10.setText("Total");

        jLabel11.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel11.setText("Other Chargers");

        jLabel12.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel12.setText("Discounts");

        jLabel13.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel13.setText("Net Total");

        txt_total.setFont(new java.awt.Font("SansSerif", 1, 20)); // NOI18N
        txt_total.setText("0.0");

        txt_othercharges.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        txt_othercharges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_otherchargesActionPerformed(evt);
            }
        });
        txt_othercharges.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_otherchargesKeyTyped(evt);
            }
        });

        txt_discount.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        txt_discount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_discountActionPerformed(evt);
            }
        });
        txt_discount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_discountKeyTyped(evt);
            }
        });

        txt_nettotal.setFont(new java.awt.Font("SansSerif", 1, 22)); // NOI18N
        txt_nettotal.setForeground(new java.awt.Color(153, 0, 0));

        jLabel7.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel7.setText("Qty");

        txt_qty.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        txt_qty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_qtyActionPerformed(evt);
            }
        });
        txt_qty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_qtyKeyTyped(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel15.setText("Unit Price");

        txt_unitprice.setEditable(false);
        txt_unitprice.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel16.setText("         GRN");

        jList1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jList1KeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jList1);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText(">");

        jLabel14.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel14.setText("Item ID");

        choose_mandate.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        choose_expdate.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        jLabel17.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel17.setText("Exp.Date");

        jLabel18.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel18.setText("Man.Date");

        jLabel19.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel19.setText("Company");

        jLabel20.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel20.setText("Branch");

        jLabel21.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel21.setText("Supplier");

        txt_company.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        txt_branch.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_total, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(110, 110, 110)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_othercharges, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(109, 109, 109)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_discount, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(71, 71, 71))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_itemid, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_qty, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_itemname)
                                        .addGap(21, 21, 21))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(57, 57, 57)
                                        .addComponent(jLabel18)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(choose_mandate, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                                        .addGap(49, 49, 49)
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(choose_expdate, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                        .addGap(31, 31, 31)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_unitprice, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_podate, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel21)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt_supplierid, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(txt_suppliername, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel19)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(txt_company))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20)
                                    .addComponent(txt_branch, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_grnid, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(81, 81, 81)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_pono, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_nettotal, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(154, 154, 154)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_invoiceid, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(169, 169, 169)))
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_grnid, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_pono, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel19)
                    .addComponent(jLabel20))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_supplierid, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_suppliername, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_company, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_branch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel21)
                        .addGap(28, 28, 28)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txt_itemid, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_itemname, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addComponent(txt_unitprice, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel14))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txt_podate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel7)
                                        .addComponent(txt_qty, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel18))
                                    .addComponent(choose_mandate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(choose_expdate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jLabel17))))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(txt_othercharges, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_discount, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_total, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txt_invoiceid, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13)
                        .addComponent(txt_nettotal, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txt_ponoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_ponoActionPerformed
        try {
            if (!txt_pono.getText().equals("")) {
                ResultSet rs = DB.search("SELECT * FROM PO p INNER JOIN supplier s on p.`supplier`=s.`nic` "
                        + "WHERE p.`POno`='" + txt_pono.getText() + "' AND p.`status`='1'");
                if (rs.next()) {
                    txt_podate.setForeground(Color.BLACK);
                    txt_podate.setText(null);
                    String supplierId = rs.getString("supplier");
                    txt_supplierid.setText(supplierId);
                    txt_podate.setText(rs.getString("POdate"));
                    String supplierName = rs.getString("fname") + " " + rs.getString("lname");
                    txt_suppliername.setText(supplierName);

                    ResultSet rs_search = DB.search("SELECT * FROM POitem WHERE `POno`='"
                            + txt_pono.getText() + "'");
                    Vector v = new Vector();
                    while (rs_search.next()) {
                        String listdata = rs_search.getString("productCode") + "-" + rs_search.getDouble("qty");
                        v.add(listdata);
                    }
                    jList1.setListData(v);
                } else {
                    txt_podate.setForeground(Color.RED);
                    txt_podate.setText("No active PO from this id");
                }
            } else {
                txt_pono.setText("NO PO");
                txt_supplierid.setEditable(true);
                txt_supplierid.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txt_ponoActionPerformed

    private void txt_supplieridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_supplieridActionPerformed
        try {
            ResultSet rs = DB.search("SELECT `fname`,`lname`,`company_branch_id` FROM supplier WHERE `nic`='"
                    + txt_supplierid.getText() + "' AND `status`='1'");
            if (rs.next()) {
                txt_suppliername.setForeground(Color.BLACK);
                String name = rs.getString("fname") + " " + rs.getString("lname");
                txt_suppliername.setText(name);
                ResultSet rs_com = DB.search("SELECT `company_name`,`branch_name` FROM company c INNER JOIN "
                        + "branch b ON b.`company_id`=c.`company_id` WHERE b.`branch_id`='"
                        + rs.getString("company_branch_id") + "'");
                if (rs_com.next()) {
                    txt_company.setText(rs_com.getString("company_name"));
                    txt_branch.setText(rs_com.getString("branch_name"));
                }
                txt_itemid.grabFocus();
            } else {
                txt_suppliername.setForeground(Color.RED);
                txt_suppliername.setText("INVALID SUPPLIER ID");
                txt_supplierid.setText(null);
                txt_supplierid.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txt_supplieridActionPerformed

    private void txt_itemidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_itemidActionPerformed
        try {
            ResultSet rs = DB.search("SELECT * FROM product WHERE `code`='" + txt_itemid.getText() + "'");
            if (rs.next()) {
                txt_itemname.setForeground(Color.BLACK);
                String brandId = rs.getString("brand");
                txt_unitprice.setText("" + rs.getDouble("buyprice"));

                if (!brandId.equals("1")) {
                    ResultSet rs_brand = DB.search("SELECT `name` FROM brand WHERE `id`='" + brandId + "'");
                    if (rs_brand.next()) {
                        String itemName = rs_brand.getString("name") + " " + rs.getString("name") + " " + rs.getDouble("weight") + "g";
                        txt_itemname.setText(itemName);
                    }
                } else {
                    txt_itemname.setText(rs.getString("name") + " " + rs.getDouble("weight") + "g");
                }
                txt_qty.grabFocus();
            } else {
                txt_itemname.setForeground(Color.RED);
                txt_itemname.setText("NO ITEM FOUND");
                txt_itemid.setText(null);
                txt_itemid.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txt_itemidActionPerformed

    private void txt_qtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_qtyActionPerformed
        if (!txt_qty.getText().equals("") && Double.parseDouble(txt_qty.getText()) > 0.0) {
            if (choose_mandate.getDate() != null & choose_expdate.getDate() != null) {
                DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                Vector v = new Vector();
                double qty = Double.parseDouble(txt_qty.getText());
                double unitprice = Double.parseDouble(txt_unitprice.getText());
                double checkedqty = checkRowRepeating(txt_itemid.getText(), sdf.format(choose_mandate.getDate()), sdf.format(choose_expdate.getDate()));
                if (checkedqty != 0) {
                    qty += checkedqty;
                }
                double subtotal = unitprice * qty;
                v.add(txt_itemid.getText());
                v.add(txt_itemname.getText());
                v.add(sdf.format(choose_mandate.getDate()));
                v.add(sdf.format(choose_expdate.getDate()));
                v.add(unitprice);
                v.add(qty);
                v.add(subtotal);
                dtm.addRow(v);
                clearFields();
                calculateTotal();
                txt_itemid.grabFocus();
            } else {
                JOptionPane.showMessageDialog(this, "Enter Expire and manufacture Dates");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Enter valid quantity");
        }
    }//GEN-LAST:event_txt_qtyActionPerformed

    private void txt_itemidKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_itemidKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            txt_othercharges.grabFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            ProductSearch ps = new ProductSearch(this);
            ps.setVisible(true);
        }
    }//GEN-LAST:event_txt_itemidKeyReleased

    private void txt_otherchargesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_otherchargesActionPerformed
        if (txt_othercharges.getText().equals("")) {
            txt_othercharges.setText("0.0");
        }
        double total = Double.parseDouble(txt_total.getText());
        double otherCharges = Double.parseDouble(txt_othercharges.getText());
        txt_othercharges.setText(String.valueOf(otherCharges));
        txt_nettotal.setText(String.valueOf(total + otherCharges));
        txt_discount.setText(null);
        txt_discount.grabFocus();
    }//GEN-LAST:event_txt_otherchargesActionPerformed

    private void txt_discountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_discountActionPerformed
        if (txt_discount.getText().equals("")) {
            txt_discount.setText("0.0");
        }
        double discount = Double.parseDouble(txt_discount.getText());
        double nettotal = Double.parseDouble(txt_nettotal.getText());
        txt_nettotal.setText("" + (nettotal - discount));
        txt_invoiceid.grabFocus();
    }//GEN-LAST:event_txt_discountActionPerformed

    private void txt_invoiceidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_invoiceidActionPerformed
        try {
            if (!txt_pono.getText().equals("NO PO")) {
                DB.push("INSERT INTO grn VALUES('"
                        + txt_grnid.getText() + "','"
                        + txt_pono.getText() + "','"
                        + txt_supplierid.getText() + "','"
                        + DateAndTime.getDateTime() + "','"
                        + txt_total.getText() + "','"
                        + txt_othercharges.getText() + "','"
                        + txt_discount.getText() + "','"
                        + txt_nettotal.getText() + "','"
                        + txt_invoiceid.getText() + "','"
                        + SystemConfigData.getActEmpId() + "')");
                DB.push("UPDATE po SET status='0' WHERE pono='" + txt_pono.getText() + "'");
            } else {
                DB.push("INSERT INTO grn(`grnno`,`supplier`,`datetime`,`total`,`other_charges`,"
                        + "`discount`,`nettotal`,`invoice`,`employee`) VALUES('"
                        + txt_grnid.getText() + "','"
                        + txt_supplierid.getText() + "','"
                        + DateAndTime.getDateTime() + "','"
                        + txt_total.getText() + "','"
                        + txt_othercharges.getText() + "','"
                        + txt_discount.getText() + "','"
                        + txt_nettotal.getText() + "','"
                        + txt_invoiceid.getText() + "','"
                        + SystemConfigData.getActEmpId() + "')");
            }
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            for (int row = 0; row < jTable1.getRowCount(); row++) {
                ResultSet rs_product = DB.search("SELECT `sellprice`,`buyprice` "
                        + "FROM product WHERE `code`='" + dtm.getValueAt(row, 0) + "'");
                if (rs_product.next()) {
                    int stockid = 0;
                    ResultSet rs = DB.search("SELECT `stockid`,`qtyavb` FROM stock WHERE"
                            + " `productcode`='" + dtm.getValueAt(row, 0)
                            + "' AND `mandate`='" + dtm.getValueAt(row, 2)
                            + "' AND `expdate`='" + dtm.getValueAt(row, 3)
                            + "' AND `stock_buy_price`='" + rs_product.getDouble("buyprice")
                            + "' AND `stock_sell_price`='" + rs_product.getDouble("sellprice") + "'");
                    if (rs.next()) {
                        double qtyavb = rs.getDouble("qtyavb");
                        double qty = Double.parseDouble(dtm.getValueAt(row, 5).toString());
                        double newqty = qtyavb + qty;
                        DB.push("UPDATE stock SET `qtyavb`='" + newqty + "' WHERE `stockid`='" + rs.getString("stockid") + "'");
                        stockid = rs.getInt("stockid");
                    } else {
                        DB.push("INSERT INTO stock(`productcode`,`mandate`,`expdate`,"
                                + "`stock_buy_price`,`stock_sell_price`,`qtyavb`) VALUES('"
                                + dtm.getValueAt(row, 0) + "','"
                                + dtm.getValueAt(row, 2) + "','"
                                + dtm.getValueAt(row, 3) + "','"
                                + rs_product.getDouble("buyprice") + "','"
                                + rs_product.getDouble("sellprice") + "','"
                                + dtm.getValueAt(row, 5) + "')");
                        ResultSet rs_stock = DB.search("SELECT MAX(stockid) AS maxid FROM stock");
                        if (rs_stock.next()) {
                            stockid = rs_stock.getInt("maxid");
                        }
                    }
                    DB.push("INSERT INTO grn_item(`grnno`,`productcode`,`stockid`,`buyprice`,`qty`,`subtotal`) VALUES('"
                            + txt_grnid.getText() + "','"
                            + dtm.getValueAt(row, 0) + "','"
                            + stockid + "','"
                            + dtm.getValueAt(row, 4) + "','"
                            + dtm.getValueAt(row, 5) + "','"
                            + dtm.getValueAt(row, 6) + "')");
                }
            }
            generateGrnReport();
            clearGrn();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txt_invoiceidActionPerformed

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            int selectedRow = jTable1.getSelectedRow();
            dtm.removeRow(selectedRow);
            calculateTotal();
        }
    }//GEN-LAST:event_jTable1KeyReleased

    private void jList1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList1KeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            if (!jList1.isSelectionEmpty()) {
                try {
                    String productCode = jList1.getSelectedValue().split("-")[0];
                    ResultSet rs = DB.search("SELECT p.`buyprice`,p.`name`,p.`brand`,p.`weight`,b.`name` "
                            + "FROM product p INNER JOIN brand b on p.`brand` = b.`id` WHERE p.`code`='" + productCode + "'");
                    if (rs.next()) {
                        double unitprice = rs.getDouble("buyprice");
                        String itemname = rs.getString("p.name") + " " + rs.getDouble("weight") + "g";
                        if (!rs.getString("brand").equals("1")) {
                            itemname = rs.getString("b.name") + " " + itemname;
                        }
                        txt_itemid.setText(productCode);
                        txt_qty.setText("" + Double.parseDouble(jList1.getSelectedValue().split("-")[1]));
                        txt_itemname.setText(itemname);
                        txt_unitprice.setText("" + unitprice);
                        txt_qty.grabFocus();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                txt_itemname.setText("Select a product from list");
            }
        }
    }//GEN-LAST:event_jList1KeyReleased

    private void txt_itemidKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_itemidKeyTyped
        if(!Character.isDigit(evt.getKeyChar())){
            evt.consume();
        }
    }//GEN-LAST:event_txt_itemidKeyTyped

    private void txt_qtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_qtyKeyTyped
        if(!Character.isDigit(evt.getKeyChar()) && evt.getKeyChar() != '.'){
            evt.consume();
        }
    }//GEN-LAST:event_txt_qtyKeyTyped

    private void txt_otherchargesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_otherchargesKeyTyped
        if(!Character.isDigit(evt.getKeyChar()) && evt.getKeyChar() != '.'){
            evt.consume();
        }
    }//GEN-LAST:event_txt_otherchargesKeyTyped

    private void txt_discountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_discountKeyTyped
        if(!Character.isDigit(evt.getKeyChar()) && evt.getKeyChar() != '.'){
            evt.consume();
        }
    }//GEN-LAST:event_txt_discountKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Grn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Grn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Grn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Grn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Grn().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser choose_expdate;
    private com.toedter.calendar.JDateChooser choose_mandate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txt_branch;
    private javax.swing.JTextField txt_company;
    private javax.swing.JTextField txt_discount;
    private javax.swing.JTextField txt_grnid;
    private javax.swing.JTextField txt_invoiceid;
    public javax.swing.JTextField txt_itemid;
    private javax.swing.JTextField txt_itemname;
    private javax.swing.JTextField txt_nettotal;
    private javax.swing.JTextField txt_othercharges;
    private javax.swing.JTextField txt_podate;
    private javax.swing.JTextField txt_pono;
    private javax.swing.JTextField txt_qty;
    private javax.swing.JTextField txt_supplierid;
    private javax.swing.JTextField txt_suppliername;
    private javax.swing.JTextField txt_total;
    private javax.swing.JTextField txt_unitprice;
    // End of variables declaration//GEN-END:variables

    private void generateGrnID() {
        try {
            ResultSet rs = DB.search("SELECT count(grnno) AS countid FROM grn");
            if (rs.next()) {
                int count = rs.getInt("countid");
                String grnId = "GRN" + (++count);
                txt_grnid.setText(grnId);
            }
            txt_pono.grabFocus();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void clearFields() {
        txt_itemid.setText(null);
        txt_itemname.setText(null);
        txt_unitprice.setText(null);
        txt_qty.setText(null);
        choose_mandate.setDate(null);
        choose_expdate.setDate(null);
    }

    private void calculateTotal() {
        double total = 0.0;
        for (int row = 0; row < jTable1.getRowCount(); row++) {
            double subtotal = Double.parseDouble(jTable1.getValueAt(row, 6).toString());
            total += subtotal;
        }
        txt_total.setText(String.valueOf(total));
    }

    private double checkRowRepeating(String itemcode, String mandate, String expdate) {
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        double checkedqty = 0;
        for (int row = 0; row < jTable1.getRowCount(); row++) {
            if (itemcode.equals(dtm.getValueAt(row, 0)) && mandate.equals(dtm.getValueAt(row, 2)) && expdate.equals(dtm.getValueAt(row, 3))) {
                checkedqty = Double.parseDouble(dtm.getValueAt(row, 5).toString());
                dtm.removeRow(row);
                break;
            }
        }
        return checkedqty;
    }

    private void clearGrn() {
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        txt_pono.setText(null);
        txt_itemid.setText(null);
        txt_itemname.setText(null);
        txt_qty.setText(null);
        txt_supplierid.setText(null);
        txt_suppliername.setText(null);
        txt_company.setText(null);
        txt_branch.setText(null);
        txt_unitprice.setText(null);
        txt_total.setText("0.0");
        txt_othercharges.setText(null);
        txt_discount.setText(null);
        txt_invoiceid.setText(null);
        txt_nettotal.setText(null);
        dtm.setRowCount(0);
        generateGrnID();
    }

    private void generateGrnReport() {
        try {
            InputStream stream = new FileInputStream("F:\\jaspersoft\\StoreGRN.jasper");
            Map<String, Object> params = new HashMap<>();
            params.put("param_grnno", txt_grnid.getText());
            params.put("param_supplierid", txt_supplierid.getText());
            params.put("param_suppliername", txt_suppliername.getText());
            params.put("param_date", DateAndTime.getDate());
            params.put("param_invoiceid", txt_invoiceid.getText());
            params.put("param_total", txt_total.getText());
            params.put("param_discount", txt_discount.getText());
            params.put("param_othercharges", txt_othercharges.getText());
            params.put("param_nettotal", txt_nettotal.getText());
            params.put("param_employee", SystemConfigData.getActEmpId());
            JRTableModelDataSource datasource = new JRTableModelDataSource(jTable1.getModel());
            JasperPrint fillReport = JasperFillManager.fillReport(stream, params, datasource);
            JasperViewer.viewReport(fillReport, false);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
