/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stock_management;

import com.stock.common.DateAndTime;
import com.stock.common.SystemConfigData;
import com.stock.db.DB;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author pasindu hathurushigh
 */
public class Invoice extends javax.swing.JFrame {

    /**
     * Creates new form Invoice
     */
    private final DefaultTableModel dtm;

    public Invoice() {
        initComponents();
        generateInvoiceId();
//        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
//        this.setSize((int) screen.getWidth(), (int) screen.getHeight());
        jTable1.getTableHeader().setFont(new Font("SansSerif", 1, 13));
        jTable1.getTableHeader().setOpaque(false);
        jTable1.getTableHeader().setForeground(Color.WHITE);
        jTable1.getTableHeader().setBackground(Color.DARK_GRAY);
        dtm = (DefaultTableModel) jTable1.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txt_invoiceid = new javax.swing.JTextField();
        txt_customerid = new javax.swing.JTextField();
        txt_customername = new javax.swing.JTextField();
        txt_itemid = new javax.swing.JTextField();
        txt_itemname = new javax.swing.JTextField();
        txt_unitprice = new javax.swing.JTextField();
        txt_qtyavb = new javax.swing.JTextField();
        txt_qty = new javax.swing.JTextField();
        txt_total = new javax.swing.JTextField();
        txt_discount = new javax.swing.JTextField();
        txt_nettotal = new javax.swing.JTextField();
        txt_payment = new javax.swing.JTextField();
        txt_balance = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txt_stockid = new javax.swing.JTextField();
        txt_category = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel1.setText("Invoice ID");

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel2.setText("Customer ID");

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel3.setText("Customer Name");

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel4.setText("Item ID");

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel5.setText("Item Name");

        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel6.setText("Unit Price");

        jLabel7.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel7.setText("QtyAvb");

        jLabel8.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel8.setText("Qty");

        jTable1.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Stock ID", "Item Code", "Item Name", "Unit Price", "Quantity", "Sub Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(20);
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(2);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(300);
        }

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel10.setText("Total");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel11.setText("Discount");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel12.setText("Net Total");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel13.setText("Payment");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel14.setText("Balance");

        txt_invoiceid.setEditable(false);
        txt_invoiceid.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        txt_customerid.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        txt_customerid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_customeridActionPerformed(evt);
            }
        });

        txt_customername.setEditable(false);
        txt_customername.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        txt_itemid.setEditable(false);
        txt_itemid.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        txt_itemid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_itemidActionPerformed(evt);
            }
        });
        txt_itemid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_itemidKeyReleased(evt);
            }
        });

        txt_itemname.setEditable(false);
        txt_itemname.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        txt_unitprice.setEditable(false);
        txt_unitprice.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        txt_qtyavb.setEditable(false);
        txt_qtyavb.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        txt_qty.setEditable(false);
        txt_qty.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        txt_qty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_qtyActionPerformed(evt);
            }
        });
        txt_qty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_qtyKeyTyped(evt);
            }
        });

        txt_total.setEditable(false);
        txt_total.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        txt_total.setText("0.0");

        txt_discount.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        txt_discount.setText("0.0");
        txt_discount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_discountActionPerformed(evt);
            }
        });
        txt_discount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_discountKeyTyped(evt);
            }
        });

        txt_nettotal.setEditable(false);
        txt_nettotal.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        txt_nettotal.setText("0.0");

        txt_payment.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        txt_payment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_paymentActionPerformed(evt);
            }
        });

        txt_balance.setEditable(false);
        txt_balance.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        txt_balance.setForeground(new java.awt.Color(153, 0, 0));
        txt_balance.setText("0.0");
        txt_balance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_balanceActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel15.setText("      INVOICE");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stock/images/close.png"))); // NOI18N
        jButton1.setContentAreaFilled(false);
        jButton1.setFocusPainted(false);
        jButton1.setOpaque(true);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel9.setText("Stock ID");

        txt_stockid.setEditable(false);
        txt_stockid.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        txt_stockid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_stockidActionPerformed(evt);
            }
        });

        txt_category.setEditable(false);
        txt_category.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        txt_category.setToolTipText("");

        jLabel16.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel16.setText("Category");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_total, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(184, 184, 184)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_discount, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_nettotal, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(129, 129, 129))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_stockid, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(116, 116, 116)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_qtyavb, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_invoiceid, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(115, 115, 115)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_customerid, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 119, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_customername, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(130, 130, 130))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel16)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txt_qty, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_category, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(241, 241, 241))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_itemid, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(txt_itemname, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(484, 484, 484)))))
                .addGap(45, 45, 45))
            .addGroup(layout.createSequentialGroup()
                .addGap(217, 217, 217)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_payment, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(276, 276, 276)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_balance, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_unitprice, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(35, 35, 35)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(txt_invoiceid, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_customerid, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_customername, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_category, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5)
                        .addComponent(jLabel6)
                        .addComponent(txt_itemid, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txt_itemname, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txt_unitprice, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel16)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_stockid, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(txt_qty, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)
                        .addComponent(txt_qtyavb, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(txt_total, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_discount, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_nettotal, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txt_payment, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(txt_balance, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txt_customeridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_customeridActionPerformed
        try {
            ResultSet rs = DB.search("SELECT `fname`,`lname` FROM customer WHERE `nic`='"
                    + txt_customerid.getText() + "' AND `status`='1'");
            if (rs.next()) {
                String name = rs.getString("fname") + " " + rs.getString("lname");
                txt_customername.setForeground(Color.BLACK);
                txt_customername.setText(name);
                txt_itemid.setEditable(true);
                txt_itemid.grabFocus();
            } else {
                txt_customername.setForeground(Color.RED);
                txt_customername.setText("INVALID CUSTOMER ID");
                txt_customerid.setText(null);
                txt_customerid.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txt_customeridActionPerformed

    private void txt_itemidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_itemidActionPerformed
        try {
            ResultSet rs = DB.search("SELECT * FROM product p INNER JOIN brand b ON p.`brand`=b.`id`"
                    + "INNER JOIN category c ON p.`category`=c.`id` WHERE p.`code`='"
                    + txt_itemid.getText() + "' AND p.`status`='1'");
            if (rs.next()) {
                txt_itemname.setForeground(Color.BLACK);
                String brandId = rs.getString("brand");
                if (!brandId.equals("1")) {
                    String itemName = rs.getString("b.name") + " " + rs.getString("p.name") + " " + rs.getDouble("weight") + "g";
                    txt_itemname.setText(itemName);
                } else {
                    txt_itemname.setText(rs.getString("name") + " " + rs.getDouble("weight") + "g");
                }
                txt_category.setText(rs.getString("c.category"));
                ResultSet rs_stock = DB.search("SELECT * FROM stock WHERE productcode='" + txt_itemid.getText() + "'");
                int count = 0;
                String stockid = null;
                Vector v = new Vector();
                while (rs_stock.next()) {
                    if (rs_stock.getDouble("qtyavb") > 0) {
                        String stockdetail = rs_stock.getString("stockid") + " -  Rs." + rs_stock.getDouble("stock_sell_price") + "  (" + rs_stock.getString("mandate") + ") - (" + rs_stock.getString("expdate") + ")";
                        v.add(stockdetail);
                        count++;
                        stockid = rs_stock.getString("stockid");
                    }
                }
                txt_stockid.setForeground(Color.BLACK);
                if (count > 1) {
                    InvoiceStock invstock = new InvoiceStock(this, v);
                    invstock.setVisible(true);
                } else if (count == 1) {
                    txt_stockid.setText(stockid);
                    txt_stockid.postActionEvent();
                } else {
                    JOptionPane.showMessageDialog(this, "No stock form this product!",
                            "Invoice Error", JOptionPane.WARNING_MESSAGE);
                    txt_stockid.setForeground(Color.RED);
                    txt_stockid.setText("No Stock");
                    txt_itemid.grabFocus();
                }

            } else {
                txt_itemname.setForeground(Color.RED);
                txt_itemname.setText("NO PRODUCT FOUND");
                txt_itemid.setText(null);
                txt_itemid.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txt_itemidActionPerformed

    private void txt_qtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_qtyActionPerformed
        try {
            if (!txt_qty.getText().equals("") && Double.parseDouble(txt_qty.getText()) > 0.0) {
                Vector v = new Vector();
                double qtyavb = Double.parseDouble(txt_qtyavb.getText());
                double qty = Double.parseDouble(txt_qty.getText());
                double newqty = qtyavb - qty;
                if (qtyavb >= qty) {
                    double checkedqty = checkRowRepeating(txt_stockid.getText());
                    if (checkedqty != 0) {
                        qty += checkedqty;
                    }
                    double unitprice = Double.parseDouble(txt_unitprice.getText());
                    double subtotal = unitprice * qty;
                    v.add(txt_stockid.getText());
                    v.add(txt_itemid.getText());
                    v.add(txt_itemname.getText());
                    v.add(unitprice);
                    v.add(qty);
                    v.add(subtotal);
                    dtm.addRow(v);
                    calculateTotal();
                    DB.push("UPDATE stock SET `qtyavb`='" + newqty + "' WHERE `stockid`='"
                            + txt_stockid.getText() + "'");
                    clearFields();
                } else {
                    JOptionPane.showMessageDialog(this, "No enough quantity in the stock!",
                            "Invoice Error", JOptionPane.WARNING_MESSAGE);
                    txt_qty.setText(null);
                    txt_qty.grabFocus();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Enter valid quantity",
                        "Invoice Error", JOptionPane.WARNING_MESSAGE);
                txt_qty.setText(null);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txt_qtyActionPerformed

    private void txt_itemidKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_itemidKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            txt_discount.setText(null);
            txt_discount.grabFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            ProductSearch ps = new ProductSearch(this);
            ps.setVisible(true);
        }
    }//GEN-LAST:event_txt_itemidKeyReleased

    private void txt_discountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_discountActionPerformed
        if (txt_discount.getText().equals("")) {
            txt_discount.setText("0.0");
        }
        if (Double.parseDouble(txt_discount.getText()) < Double.parseDouble(txt_total.getText())) {
            double total = Double.parseDouble(txt_total.getText());
            double discount = Double.parseDouble(txt_discount.getText());
            txt_discount.setText("" + discount);
            double nettotal = total - discount;
            txt_nettotal.setText("" + nettotal);
            txt_payment.setEditable(true);
            txt_payment.grabFocus();
        } else {
            JOptionPane.showMessageDialog(this, "Discount cannot be more than total!",
                    "Invoice Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_txt_discountActionPerformed

    private void txt_paymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_paymentActionPerformed
        try {
            if (!txt_payment.getText().equals("")) {
                double nettotal = Double.parseDouble(txt_nettotal.getText());
                double payment = Double.parseDouble(txt_payment.getText());
                txt_payment.setText(String.valueOf(payment));
                if (nettotal <= payment) {
                    txt_balance.setText("" + (payment - nettotal));
                    txt_balance.grabFocus();
                } else {
                    JOptionPane.showMessageDialog(this, "Payment not enough!",
                            "Invoice Error", JOptionPane.WARNING_MESSAGE);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txt_paymentActionPerformed

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        try {
            if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
                int selectedRow = jTable1.getSelectedRow();
                double invoicedQty = Double.parseDouble(dtm.getValueAt(selectedRow, 3).toString());
                String stockid = dtm.getValueAt(selectedRow, 0).toString();
                ResultSet rs = DB.search("SELECT qtyavb FROM stock WHERE `stockid`='" + stockid + "'");
                if (rs.next()) {
                    double qtyavb = rs.getDouble("qtyavb") + invoicedQty;
                    DB.push("UPDATE stock SET `qtyavb`='" + qtyavb + "' WHERE `stockid`='" + stockid + "'");
                }
                dtm.removeRow(selectedRow);
                calculateTotal();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_jTable1KeyReleased

    private void txt_balanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_balanceActionPerformed
        try {
            DB.push("INSERT INTO invoice VALUES('"
                    + txt_invoiceid.getText() + "','"
                    + txt_customerid.getText() + "','"
                    + DateAndTime.getDateTime() + "','"
                    + txt_total.getText() + "','"
                    + txt_discount.getText() + "','"
                    + txt_nettotal.getText() + "','"
                    + txt_payment.getText() + "','"
                    + SystemConfigData.getActEmpId() + "')");

            for (int row = 0; row < jTable1.getRowCount(); row++) {
                DB.push("INSERT INTO invoice_item(`invoiceno`,`productcode`,`stockid`,"
                        + "`sellprice`,`qty`,`subtotal`) VALUES('"
                        + txt_invoiceid.getText() + "','"
                        + dtm.getValueAt(row, 1) + "','"
                        + dtm.getValueAt(row, 0) + "','"
                        + dtm.getValueAt(row, 3) + "','"
                        + dtm.getValueAt(row, 4) + "','"
                        + dtm.getValueAt(row, 5) + "')");
            }
            generateInvoiceReport();
            clearInvoice();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txt_balanceActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            for (int row = 0; row < dtm.getRowCount(); row++) {
                ResultSet rs = DB.search("SELECT `qtyavb` FROM stock WHERE `stockid`='"
                        + dtm.getValueAt(row, 0) + "'");
                if (rs.next()) {
                    double qty = Double.parseDouble(dtm.getValueAt(row, 4).toString());
                    double qtyavb = rs.getDouble("qtyavb");
                    double newqty = qty + qtyavb;
                    DB.push("UPDATE stock SET `qtyavb`='" + newqty + "' WHERE `stockid`='"
                            + dtm.getValueAt(row, 0) + "'");
                }
            }
            this.dispose();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txt_stockidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_stockidActionPerformed
        try {
            ResultSet rs = DB.search("SELECT `qtyavb`,`stock_sell_price` FROM stock WHERE `stockid`='"
                    + txt_stockid.getText() + "'");
            if (rs.next()) {
                txt_qtyavb.setText("" + rs.getDouble("qtyavb"));
                txt_unitprice.setText("" + rs.getDouble("stock_sell_price"));
            }
            txt_qty.setEditable(true);
            txt_qty.grabFocus();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txt_stockidActionPerformed

    private void txt_qtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_qtyKeyTyped
        if (!Character.isDigit(evt.getKeyChar()) && evt.getKeyChar() != '.') {
            evt.consume();
        }
    }//GEN-LAST:event_txt_qtyKeyTyped

    private void txt_discountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_discountKeyTyped
        if (!Character.isDigit(evt.getKeyChar()) && evt.getKeyChar() != '.') {
            evt.consume();
        }
    }//GEN-LAST:event_txt_discountKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Invoice().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txt_balance;
    private javax.swing.JTextField txt_category;
    private javax.swing.JTextField txt_customerid;
    private javax.swing.JTextField txt_customername;
    private javax.swing.JTextField txt_discount;
    private javax.swing.JTextField txt_invoiceid;
    public javax.swing.JTextField txt_itemid;
    private javax.swing.JTextField txt_itemname;
    private javax.swing.JTextField txt_nettotal;
    private javax.swing.JTextField txt_payment;
    private javax.swing.JTextField txt_qty;
    private javax.swing.JTextField txt_qtyavb;
    public javax.swing.JTextField txt_stockid;
    private javax.swing.JTextField txt_total;
    private javax.swing.JTextField txt_unitprice;
    // End of variables declaration//GEN-END:variables

    private void generateInvoiceId() {
        try {
            ResultSet rs = DB.search("SELECT COUNT(invoiceno) as countid FROM invoice");
            if (rs.next()) {
                int count = rs.getInt("countid");
                String InvoiceId = "INV" + (++count);
                txt_invoiceid.setText(InvoiceId);
            }
            txt_customerid.grabFocus();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void clearFields() {
        txt_itemid.setText(null);
        txt_itemname.setText(null);
        txt_unitprice.setText(null);
        txt_qty.setText(null);
        txt_qty.setEditable(false);
        txt_qtyavb.setText(null);
        txt_itemid.grabFocus();
        txt_stockid.setText(null);
        txt_category.setText(null);
    }

    private void calculateTotal() {
        double total = 0;
        for (int row = 0; row < jTable1.getRowCount(); row++) {
            double subtotal = Double.parseDouble(jTable1.getValueAt(row, 5).toString());
            total += subtotal;
            txt_total.setText("" + total);
        }

    }

    private void clearInvoice() {
        generateInvoiceId();
        txt_customerid.setText(null);
        txt_customername.setText(null);
        txt_itemid.setText(null);
        txt_itemname.setText(null);
        txt_unitprice.setText(null);
        txt_qtyavb.setText(null);
        txt_qty.setText(null);
        txt_total.setText("0.0");
        txt_discount.setText("0.0");
        txt_nettotal.setText("0.0");
        txt_payment.setText(null);
        txt_balance.setText(null);
        txt_stockid.setText(null);
        dtm.setRowCount(0);
    }

    private double checkRowRepeating(String stockid) {
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        double checkedqty = 0;
        for (int row = 0; row < jTable1.getRowCount(); row++) {
            if (stockid.equals(dtm.getValueAt(row, 0))) {
                checkedqty = Double.parseDouble(dtm.getValueAt(row, 4).toString());
                dtm.removeRow(row);
                break;
            }
        }
        return checkedqty;
    }

    private void generateInvoiceReport() {
        try {
            InputStream stream = new FileInputStream("src/com/stock/report/StoreInvoice.jasper");
            Map<String, Object> params = new HashMap<>();
            params.put("param_invid", txt_invoiceid.getText());
            params.put("param_customerid", txt_customerid.getText());
            params.put("param_customername", txt_customername.getText());
            params.put("param_total", txt_total.getText());
            params.put("param_discount", txt_discount.getText());
            params.put("param_nettotal", txt_nettotal.getText());
            params.put("param_payment", txt_payment.getText());
            params.put("param_balance", txt_balance.getText());
            params.put("param_employee", SystemConfigData.getActEmpId());
            JRTableModelDataSource datasource = new JRTableModelDataSource(jTable1.getModel());
            JasperPrint fillReport = JasperFillManager.fillReport(stream, params, datasource);
            JasperViewer.viewReport(fillReport, false);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
